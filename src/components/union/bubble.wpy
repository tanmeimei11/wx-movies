<template>
  <view class="bubble">
     <!-- <swiper autoplay @change="changeSwiper" interval="5000" vertical=true>
        <swiper-item wx:for="{{bubbleInfo}}" wx:for-index="idx" wx:for-item="item" wx:key="idx">
          <view class="bubble-wrap">
            <view class="bubble">{{item}}</view>
          </view>
        </swiper-item>
    </swiper> -->
    <view class="bubble-wrap" wx:if="{{isShow}}">{{text}}</view>
    <!-- <view class="bubble-wrap" animation="{{animationData1}}">2</view> -->
  </view>
</template>
      
<style lang="less">
  .bubble{
    position: fixed;
    top: 80rpx;
    left: 45rpx;
    width: 340rpx;
    height: 60rpx;
    // height: 245rpx;
    z-index: 5;
    background-color: transparent;
   
     swiper{
      width: 100%;
      height: 100%;
      swiper-item{
        width: 100%;
        height: 100%;
      }
    }
    .bubble-wrap{
      background: rgba(0, 0, 0, 0.5);
      width: 325rpx;
      height: 45rpx;
      font-size: 24rpx;
      color: #fff;
      box-sizing: border-box;
      padding: 6rpx 10rpx;
      border-radius: 6rpx;
    }
    // .bubble-wrap{
    //   width: 100%;
    //   height: 100%;
    //   display: flex;
    //   justify-content: center;
    //   align-items: center;
     
    // }
  }
</style>

<script>
  import wepy from 'wepy';
  import { request } from '@/utils/request';
  import track from '@/utils/track';
  import Union from '@/api/union';

  export default class bubble extends wepy.component {
    props = {
      productId:String
    }
    data = {
      animation:null,
      animation1:null,
      animationData: {},
      animationData1: {},
      aniConfig:{
        duration: 1000,
        timingFunction: "ease",
        delay: 1000
      },
      isShow:false,
      text:'',
      showDuration: 2000,
      bubbleInfo:[],
      isGetBubble:false
    }
  
    async loopBubble () {
      var len = this.bubbleInfo.length
      var _item = this.bubbleInfo.splice(0,1)
      if(_item[0] && _item[0].text && _item[0].time){
        await this.showBubble(_item[0].text, _item[0].time)
      }else {
        this.getBulle()
      }
    }

    async setTimeoutPromise (time) {
      return new Promise ((resolve, reject) =>{
        setTimeout(() => {
          resolve()
        },time)
      })
    }

    async showBubble (text, time) {
      this.text = text
      await this.setTimeoutPromise(time * 1000)
      this.isShow = true
      this.$apply()
      await this.setTimeoutPromise(this.showDuration)
      this.isShow = false
      this.$apply()
      await this.loopBubble()
         
    }

    async getBulle () {
      if( this.isGetBubble) {return }
      this.isGetBubble = true
      var data = await Union.getBulleInfo({
        product_id: this.productId
      })
      this.isGetBubble = false
      this.bubbleInfo = data.bubble_info
      if( this.bubbleInfo.length == 0 ){return }
      await this.loopBubble()
    }

    initAnimation () {
      const _aniConfig = {
        duration: 1000,
        timingFunction: "ease",
        delay: 1000
      }
      this.animation = wx.createAnimation(_aniConfig)
      this.animation1 = wx.createAnimation(_aniConfig)
     
      this.loopAnimation()
      setInterval(()=>{
        this.loopAnimation()
      },5000)
    }

    loopAnimation () {
      let _animation = this.animation
      let _animation1 = this.animation1

      _animation.translateY(-20).step()
      _animation.translateY(20).step({delay: 0, duration: 0})
      _animation.translateY(0).step()

      _animation1.translateY(-20).step()
      _animation1.translateY(-40).step()
      _animation1.translateY(0).step({delay: 0, duration: 0})

      this.animationData = _animation.export()
      this.animationData1 = _animation1.export()
      console.log(this.animationData,this.animationData1)
      this.$apply()
     
    }
    
  }
</script>
      
